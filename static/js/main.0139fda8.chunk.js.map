{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/FindMovie/FindMovie.tsx","App.tsx","api.ts","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","FindMovie","setQuery","movieFound","setMovies","setMovie","query","showError","setShowError","isRequested","setIsRequested","isNowRequested","setIsNowRequested","useState","value","setValue","useEffect","onSubmit","event","preventDefault","htmlFor","type","id","placeholder","onChange","target","classNames","disabled","onClick","prevMovies","prevMovie","includes","undefined","App","someMovie","fetch","then","res","json","catch","Response","Error","getMovie","Title","length","Plot","Poster","imdbID","finally","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0139fda8.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movieCard\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          data-cy=\"moviePoster\"\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\" data-cy=\"movieTitle\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\" data-cy=\"movieDescription\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl} data-cy=\"movieURL\">\n          IMDB\n        </a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport './FindMovie.scss';\nimport classNames from 'classnames';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  setQuery: React.Dispatch<React.SetStateAction<string>>,\n  movieFound: Movie | undefined,\n  setMovies: React.Dispatch<React.SetStateAction<Movie[]>>,\n  setMovie: React.Dispatch<React.SetStateAction<Movie | undefined>>\n  query: string,\n  showError: boolean,\n  setShowError: (showError: boolean) => void,\n  isRequested: boolean,\n  setIsRequested: (showError: boolean) => void,\n  isNowRequested: boolean,\n  setIsNowRequested: (showError: boolean) => void,\n}\n\nexport const FindMovie: React.FC<Props> = ({\n  setQuery,\n  movieFound,\n  setMovies,\n  setMovie,\n  query,\n  showError,\n  setShowError,\n  isRequested,\n  setIsRequested,\n  isNowRequested,\n  setIsNowRequested,\n}) => {\n  const [value, setValue] = useState('');\n\n  useEffect(() => {\n    setShowError(false);\n  }, [query]);\n\n  return (\n    <>\n      <form\n        className=\"find-movie\"\n        onSubmit={(event) => {\n          event.preventDefault();\n          setQuery(value);\n          setIsRequested(true);\n          setIsNowRequested(true);\n        }}\n      >\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className=\"input is-dander\"\n              value={value}\n              onChange={(event) => setValue(event.target.value)}\n            />\n          </div>\n\n          {showError && isRequested && (\n            <p className=\"help is-danger\" data-cy=\"errorMessage\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              data-cy=\"searchButton\"\n              type=\"submit\"\n              className={classNames(\n                'button is-light',\n                { 'is-loading': isNowRequested },\n              )}\n              disabled={value === ''}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          {movieFound && (\n            <div className=\"control\">\n              <button\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={() => {\n                  setMovies(\n                    prevMovies => {\n                      if (prevMovies.map(prevMovie => prevMovie.title)\n                        .includes(movieFound.title)) {\n                        return prevMovies;\n                      }\n\n                      return [...prevMovies, movieFound];\n                    },\n                  );\n                  setQuery('');\n                  setValue('');\n                  setMovie(undefined);\n                  setIsRequested(false);\n                  setIsNowRequested(false);\n                }}\n              >\n                Add to the list\n              </button>\n            </div>\n          )}\n        </div>\n      </form>\n\n      {movieFound && (\n        <div className=\"container\" data-cy=\"previewContainer\">\n          <h2 className=\"title\">Preview</h2>\n          <MovieCard movie={movieFound} />\n        </div>\n      )}\n    </>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\nimport { getMovie } from './api';\nimport { ResponseError } from './types/ReponseError';\nimport { MovieData } from './types/MovieData';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n  const [query, setQuery] = useState('');\n  const [showError, setShowError] = useState(false);\n  const [someMovie, setMovie] = useState<Movie>();\n  const [isRequested, setIsRequested] = useState(false);\n  const [isNowRequested, setIsNowRequested] = useState(false);\n\n  const isMovieData = (data: MovieData | ResponseError): data is MovieData => {\n    return (data as MovieData).Title !== undefined;\n  };\n\n  useEffect(() => {\n    getMovie(query).then(movie => {\n      if (isMovieData(movie) && query.length) {\n        setMovie({\n          title: movie.Title,\n          description: movie.Plot,\n          imgUrl: movie.Poster !== 'N/A'\n            ? movie.Poster\n            : 'https://via.placeholder.com/360x270.png?text=no%20preview',\n          imdbUrl: `https://www.imdb.com/title/${movie.imdbID}`,\n          imdbId: movie.imdbID,\n        });\n        setShowError(false);\n        setIsNowRequested(false);\n      } else {\n        setShowError(true);\n      }\n    })\n      .catch(() => setShowError(true))\n      .finally(() => setIsNowRequested(false));\n  }, [query]);\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie\n          setQuery={setQuery}\n          movieFound={someMovie}\n          setMovies={setMovies}\n          setMovie={setMovie}\n          query={query}\n          showError={showError}\n          setShowError={setShowError}\n          isRequested={isRequested}\n          setIsRequested={setIsRequested}\n          isNowRequested={isNowRequested}\n          setIsNowRequested={setIsNowRequested}\n        />\n      </div>\n    </div>\n  );\n};\n","import { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ReponseError';\n\nconst API_URL = 'https://www.omdbapi.com/?i=tt3896198&apikey=fd2f3d79';\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}